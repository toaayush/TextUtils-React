{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.270c3e30.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}: </strong>{props.alert.msg}\r\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n            </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            {/* <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/> */}\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\",\r\n    aboutText: \"About\"\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Uppercase was clicked: \" + text);\r\n        // setText(\"You have clicked on handleUpClick\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n\r\n    }\r\n    const handleClearClick = ()=>{\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n        // console.log(\"On change\");\r\n    }\r\n    const handleCopy = ()=>{\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select(); //Optional\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n    \r\n    const [text, setText] = useState('');\r\n    // text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\"); // Right way to change the state\r\n  return (\r\n    <div>\r\n        <>\r\n            <div className=\"container\" style={{color: props.mode==='light'?'black':'white'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#042743':'white', color: props.mode==='light'?'black':'white'}} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode==='light'?'black':'white'}}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008*text.split(\" \").length} Minutes to read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    </div>\r\n  )\r\n}\r\n","\nimport React, { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark Mode';\n      // setInterval(() => {\n      //   document.title = 'TextUtils is Amazing';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now';\n      // }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n  return (\n    <>\n      {/* <Navbar title = \"TextUtils\" aboutText = \"About TextUtils\"/> */}\n      {/* <Navbar/> */}\n      {/* <Router> */}\n      <Navbar title = \"TextUtils\" mode = {mode} toggleMode = {toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        {/* <Switch> */}\n          {/* /users --> Component 1\n          /users/home --> Component 2 - This can render if we don't use exact for /users only*/}\n          {/* <Route exact path=\"/about\">\n            <About/>\n          </Route>\n          <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading = \"Enter the text to analyze below\" mode = {mode}/>\n          {/* </Route>\n        </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}